-- codigo 100

## Ejemplo Básico del Flujo

### Solicitud Inicial del Cliente

```http
POST /upload HTTP/1.1
Host: example.com
Content-Length: 123456
Expect: 100-continue
```



### Respuesta del Servidor

```http
HTTP/1.1 100 Continue
```

### El Cliente Envía el Cuerpo de la Solicitud

```http
(file content sent here)
```

### Respuesta Final del Servidor

```http
HTTP/1.1 200 OK
Content-Type: text/plain

Upload successful
```

## Ejemplo en Código

### Cliente (Usando Node.js con Axios)

```javascript
const axios = require('axios');
const fs = require('fs');

async function uploadFile() {
    const fileStream = fs.createReadStream('./large-file.txt');

    try {
        const response = await axios.post('http://example.com/upload', fileStream, {
            headers: {
                'Content-Type': 'application/octet-stream',
                'Expect': '100-continue',
            },
        });
        console.log('Response:', response.data);
    } catch (error) {
        console.error('Error uploading file:', error.response ? error.response.data : error.message);
    }
}

uploadFile();
```

### Servidor (Usando Node.js con Express)

```javascript
const express = require('express');
const app = express();

app.post('/upload', (req, res) => {
    req.on('data', (chunk) => {
        console.log('Receiving data chunk...');
    });

    req.on('end', () => {
        console.log('Upload complete');
        res.status(200).send('Upload successful');
    });
});

app.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
```


## Notas Importantes

1. **Evitar `Expect: 100-continue` innecesario:** Aunque es útil en situaciones específicas, generalmente no es necesario si el cuerpo de la solicitud es pequeño.
2. **Soporte del servidor:** Algunos servidores pueden ignorar el encabezado `Expect: 100-continue` y tratar inmediatamente la solicitud.
3. **Manejo de errores:** Si el servidor no puede procesar la solicitud (por ejemplo, debido a un encabezado inválido), puede responder con otro código (como `417 Expectation Failed`) antes de que el cliente envíe el cuerpo.

El uso del código `100 Continue` ayuda a mejorar la eficiencia en escenarios donde el tamaño del cuerpo de la solicitud es significativo.

termina el contenido de codigo 100

--codigo 101

## Flujo de Comunicación

1. El cliente envía una solicitud con el encabezado `Upgrade` indicando el protocolo deseado.
2. Si el servidor acepta, responde con el código **101 Switching Protocols**.
3. A partir de este momento, la conexión utiliza el nuevo protocolo.

---

## Ejemplo en Código

### Ejemplo de Solicitud del Cliente

```http
GET /chat HTTP/1.1
Host: example.com
Connection: Upgrade
Upgrade: websocket
```

### Respuesta del Servidor

```http
HTTP/1.1 101 Switching Protocols
Connection: Upgrade
Upgrade: websocket
```

Después de esta respuesta, la conexión cambiará a WebSocket y podrá intercambiar mensajes según ese protocolo.


### Implementación en WebSocket (Node.js)

#### Servidor

```javascript
const http = require('http');
const WebSocket = require('ws');

const server = http.createServer((req, res) => {
    res.writeHead(426, { 'Content-Type': 'text/plain' });
    res.end('Upgrade required');
});

const wss = new WebSocket.Server({ server });

wss.on('connection', (ws) => {
    console.log('Client connected via WebSocket');
    ws.on('message', (message) => {
        console.log(`Received message: ${message}`);
        ws.send('Message received');
    });
});

server.listen(8080, () => {
    console.log('Server listening on http://localhost:8080');
});
```
#### Cliente

```javascript
const WebSocket = require('ws');

const ws = new WebSocket('ws://localhost:8080');

ws.on('open', () => {
    console.log('Connected to WebSocket server');
    ws.send('Hello, server!');
});

ws.on('message', (message) => {
    console.log(`Received: ${message}`);
});
```

## Notas Importantes

1. **Uso Limitado:** El código `101 Switching Protocols` solo se usa cuando hay un cambio real en el protocolo. De lo contrario, no es necesario.
2. **Encabezado Obligatorio:** La solicitud debe incluir los encabezados `Upgrade` y `Connection` para que el servidor considere la actualización.
3. **Seguridad:** Antes de aceptar un cambio de protocolo, el servidor debe asegurarse de que sea seguro y compatible.

Este código de estado es esencial para la interoperabilidad entre protocolos y se usa principalmente en aplicaciones modernas como WebSockets para proporcionar comunicación en tiempo real.

termina el contenido de codigo 101

--- codigo 102


El código de respuesta **102 Processing** es parte del protocolo HTTP/1.1 y está definido en la especificación [RFC 2518](https://www.rfc-editor.org/rfc/rfc2518), que introduce extensiones para el protocolo HTTP en el contexto de Web Distributed Authoring and Versioning (WebDAV).

---

## Propósito del Código 102 Processing

Este código de estado indica que el servidor ha recibido y está procesando la solicitud, pero necesita más tiempo para completarla. 

### Usos Comunes
- **WebDAV:** Se utiliza en operaciones complejas de WebDAV, como cuando se ejecutan múltiples operaciones en recursos (por ejemplo, copiar o mover un árbol de directorios).
- **Evitar Timeouts:** Responde al cliente que el servidor aún está trabajando en la solicitud, para evitar que el cliente asuma que la conexión se ha perdido.

---

## Características Principales
1. **Indicación de Progreso:** Sirve como una señal al cliente de que la solicitud no ha sido olvidada.
2. **No Finaliza la Solicitud:** La respuesta `102 Processing` no es una respuesta final. La operación sigue en curso.
3. **Uso Limitado:** Normalmente utilizado en contextos específicos (como WebDAV) y no en solicitudes HTTP estándar.

---

## Ejemplo de Flujo

1. El cliente envía una solicitud compleja, como una operación WebDAV que afecta a múltiples recursos.
2. El servidor responde con `102 Processing` para informar al cliente que la solicitud está en curso.
3. El servidor luego envía una respuesta final (por ejemplo, `200 OK`) cuando completa la operación.

## Ejemplo en Código

### Ejemplo de Solicitud del Cliente (WebDAV)

```http
MOVE /documents/folderA/ HTTP/1.1
Host: example.com
Destination: http://example.com/documents/folderB/
```

### Respuesta del Servidor

#### Respuesta Inicial (Progreso)

```http
HTTP/1.1 102 Processing
```

#### Respuesta Final (Éxito)

```http
HTTP/1.1 201 Created
```

## Implementación en Node.js

Aunque `102 Processing` no es común en aplicaciones estándar, puedes simular su uso en un servidor Node.js:

```javascript
const http = require('http');

const server = http.createServer((req, res) => {
    if (req.method === 'MOVE') {
        // Simular una operación larga
        res.writeHead(102, { 'Content-Type': 'text/plain' });
        res.write('Processing...');
        
        setTimeout(() => {
            res.writeHead(201, { 'Content-Type': 'text/plain' });
            res.end('Move operation completed');
        }, 5000); // Simula 5 segundos de procesamiento
    } else {
        res.writeHead(404, { 'Content-Type': 'text/plain' });
        res.end('Not Found');
    }
});

server.listen(8080, () => {
    console.log('Server running on http://localhost:8080');
});
```
## Notas Importantes

1. **Contexto Limitado:** El código 102 es principalmente para WebDAV y no suele usarse en aplicaciones web estándar.
2. **Compatibilidad:** Algunos clientes y navegadores pueden no manejar adecuadamente este código de estado.
3. **Tiempo de Proceso:** Si el servidor no espera un procesamiento prolongado, no necesita usar este código.

Este código es una herramienta útil en casos específicos donde las operaciones pueden tardar mucho tiempo, brindando una mejor experiencia al cliente al mantenerlo informado.

termina el contenido de codigo 102

-- codigo 103

### **Ejemplo Práctico**
**Solicitud HTTP del cliente**:
```http
GET /index.html HTTP/1.1
Host: example.com
```

**Respuesta del servidor**:
```http
HTTP/1.1 103 Early Hints
Link: </styles.css>; rel=preload; as=style
Link: </script.js>; rel=preload; as=script
```

**Respuesta final**:
```http
HTTP/1.1 200 OK
Content-Type: text/html

<!DOCTYPE html>
<html>
<head>
    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    <script src="/script.js"></script>
</body>
</html>
```

### **Explicación del Ejemplo**
1. El servidor envía primero una respuesta `103 Early Hints` con encabezados `Link` que indican al navegador que comience a cargar `styles.css` y `script.js`.
2. Mientras el navegador precarga esos recursos, el servidor prepara y envía la respuesta completa con un código `200 OK` y el contenido HTML.
3. El navegador ya tiene los recursos críticos (CSS y JS) listos antes de renderizar la página, lo que mejora el tiempo de carga.

termina el contenido de codigo 103

--- codigo 200

#### **Ejemplo 1: Respuesta a una solicitud GET**

##### **Solicitud**
El cliente solicita un recurso, como la información de un usuario:
```http
GET /users/123 HTTP/1.1
Host: example.com
```

##### **Respuesta**
```http
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 56

{
  "id": 123,
  "name": "John Doe",
  "email": "john.doe@example.com"
}
```

En este caso, el código `200 OK` confirma que el recurso del usuario con ID `123` fue encontrado y su información se devuelve en formato JSON.

#### **Ejemplo 2: Respuesta a una solicitud POST**

##### **Solicitud**
El cliente envía datos para crear un nuevo usuario:
```http
POST /users HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "name": "Jane Doe",
  "email": "jane.doe@example.com"
}
```

##### **Respuesta**
```http
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 44

{
  "id": 124,
  "message": "User created successfully"
}
```

Aquí, el código `200 OK` confirma que el usuario fue creado correctamente. La respuesta incluye un mensaje de confirmación y el ID del nuevo usuario.

termina el contenido de codigo 200

--codigo 201

### **Ejemplo**
Supongamos que una aplicación tiene una API para registrar nuevos usuarios:

#### **Solicitud:**
```http
POST /users HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "username": "marco123",
  "email": "marco@example.com",
  "password": "securepassword123"
}
```

#### **Respuesta:**
```http
HTTP/1.1 201 Created
Location: https://example.com/users/12345
Content-Type: application/json

{
  "id": 12345,
  "username": "marco123",
  "email": "marco@example.com",
  "created_at": "2025-01-12T10:00:00Z"
}
```

termina el contenido de codigo 201

-- codigo 202

### **Código de Respuesta HTTP 202: Accepted**

---

### **Ejemplo**
Supongamos que una aplicación tiene una API que inicia un proceso de generación de reportes.

#### **Solicitud:**
```http
POST /reports HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "report_type": "sales",
  "date_range": "2024-01-01_to_2024-12-31"
}
```
#### **Respuesta:**
```http
HTTP/1.1 202 Accepted
Content-Type: application/json

{
  "status": "Processing",
  "report_id": "67890",
  "message": "Your report is being generated. You will be notified when it's ready."
}
```

termina el contenido de codigo 202

--- codio 203

### **Código de Respuesta HTTP 203: Non-Authoritative Information**

### **Ejemplo**
Supongamos que un cliente realiza una solicitud a un proxy para obtener información de un recurso.

#### **Solicitud:**
```http
GET /api/products/123 HTTP/1.1
Host: example.com
```

#### **Respuesta (desde el proxy):**
```http
HTTP/1.1 203 Non-Authoritative Information
Content-Type: application/json

{
  "id": 123,
  "name": "Laptop",
  "price": 999.99,
  "currency": "USD",
  "note": "Price converted by proxy; original currency was EUR."
}
```

En este caso, el proxy devolvió una versión modificada de la respuesta original al convertir la moneda de euros a dólares estadounidenses.

termina el contenido de codigo 203

--- codigo 204

### **Código de Respuesta HTTP 204: No Content**

### **Ejemplo**
Supongamos que una API permite a los usuarios actualizar su configuración, pero no devuelve datos adicionales después de la actualización.

#### **Solicitud:**
```http
PUT /api/user/settings HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "notifications": "enabled",
  "theme": "dark"
}
```

#### **Respuesta:**
```http
HTTP/1.1 204 No Content
```

En este caso, la configuración se actualizó correctamente, pero no hay necesidad de enviar datos adicionales al cliente.

termina el contenido de codigo 204

-- codigo 205


### **Código de Respuesta HTTP 205: Reset Content**

### **Ejemplo**
Un formulario en una aplicación web permite a los usuarios enviar comentarios. Una vez enviado, el servidor solicita al cliente que limpie el formulario para permitir otro comentario.

#### **Solicitud:**
```http
POST /api/feedback HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "message": "Great service!",
  "rating": 5
}
```

#### **Respuesta:**
```http
HTTP/1.1 205 Reset Content
```

En este caso, el servidor ha recibido el comentario con éxito y solicita al cliente que restablezca el formulario (por ejemplo, limpiando los campos de texto).

### **Diferencias con 204 No Content**
- **`204 No Content`**: Indica éxito sin contenido adicional, pero no requiere ninguna acción del cliente.
- **`205 Reset Content`**: Indica éxito y además solicita explícitamente al cliente que reinicie o actualice su estado.

El uso de `205 Reset Content` es ideal para aplicaciones donde el cliente necesita orientación clara para restablecer su interfaz o estado después de una operación exitosa.


--- codigo 204

### **Código de Respuesta HTTP 204: No Content**

---

### **Ejemplo**
Supongamos que una API permite a los usuarios actualizar su configuración, pero no devuelve datos adicionales después de la actualización.

#### **Solicitud:**
```http
PUT /api/user/settings HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "notifications": "enabled",
  "theme": "dark"
}
```

#### **Respuesta:**
```http
HTTP/1.1 204 No Content
```

En este caso, la configuración se actualizó correctamente, pero no hay necesidad de enviar datos adicionales al cliente.

termina el contenido de codigo 204

-- codigo 205

### **Código de Respuesta HTTP 205: Reset Content**



---

### **Ejemplo**
Un formulario en una aplicación web permite a los usuarios enviar comentarios. Una vez enviado, el servidor solicita al cliente que limpie el formulario para permitir otro comentario.

#### **Solicitud:**
```http
POST /api/feedback HTTP/1.1
Host: example.com
Content-Type: application/json

{
  "message": "Great service!",
  "rating": 5
}
```

#### **Respuesta:**
```http
HTTP/1.1 205 Reset Content
```

En este caso, el servidor ha recibido el comentario con éxito y solicita al cliente que restablezca el formulario (por ejemplo, limpiando los campos de texto).

termina el contenido de codigo 205

-- 206

### **Ejemplo**
Supongamos que el cliente está descargando un archivo grande y solicita un rango específico de bytes del archivo.

#### **Solicitud:**
```http
GET /large-file.zip HTTP/1.1
Host: example.com
Range: bytes=0-1023
```

#### **Respuesta:**
```http
HTTP/1.1 206 Partial Content
Content-Range: bytes 0-1023/1048576
Content-Type: application/zip

(binary data of the first 1024 bytes)
```

En este caso, el cliente ha solicitado los primeros 1024 bytes de un archivo de 1 MB, y el servidor ha proporcionado exactamente esa parte.

---

### **Beneficios de Usar 206 Partial Content**
- Mejora la experiencia del usuario al permitir descargas y transmisiones más flexibles.
- Ahorra ancho de banda al limitar la cantidad de datos transferidos a lo necesario.
- Facilita el manejo de archivos grandes en entornos con conexiones inestables.

---

-- codigo 207

### **Ejemplo**
Supongamos que un cliente envía una solicitud WebDAV para copiar múltiples archivos en un servidor, y algunos de ellos tienen éxito mientras que otros fallan.

#### **Solicitud:**
```http
COPY /folder1/ HTTP/1.1
Host: example.com
Destination: /folder2/
```

#### **Respuesta:**
```http
HTTP/1.1 207 Multi-Status
Content-Type: application/xml; charset="utf-8"

<?xml version="1.0" encoding="utf-8"?>
<multistatus xmlns="DAV:">
  <response>
    <href>/folder2/file1.txt</href>
    <status>HTTP/1.1 201 Created</status>
  </response>
  <response>
    <href>/folder2/file2.txt</href>
    <status>HTTP/1.1 403 Forbidden</status>
  </response>
  <response>
    <href>/folder2/file3.txt</href>
    <status>HTTP/1.1 204 No Content</status>
  </response>
</multistatus>
```

En este caso:
- `file1.txt` fue copiado con éxito (`201 Created`).
- `file2.txt` falló debido a permisos insuficientes (`403 Forbidden`).
- `file3.txt` ya existía y no se realizó ninguna acción (`204 No Content`).

---

### **Consideraciones**
- **Formato XML**: El cliente debe estar preparado para analizar una respuesta en XML.
- **Específico de WebDAV**: Este código no es común fuera de aplicaciones que implementan WebDAV.

---

--codigo 208

### **Código de Respuesta HTTP 208: Already Reported**

#### **Descripción**

---

### **Ejemplo**
Supongamos que un cliente realiza una solicitud `PROPFIND` para obtener las propiedades de un directorio y todos sus subdirectorios.

#### **Solicitud:**
```http
PROPFIND /folder1/ HTTP/1.1
Host: example.com
Depth: 1
```

#### **Respuesta:**
```http
HTTP/1.1 207 Multi-Status
Content-Type: application/xml; charset="utf-8"

<?xml version="1.0" encoding="utf-8"?>
<multistatus xmlns="DAV:">
  <response>
    <href>/folder1/</href>
    <propstat>
      <prop>
        <displayname>folder1</displayname>
      </prop>
      <status>HTTP/1.1 200 OK</status>
    </propstat>
  </response>
  <response>
    <href>/folder1/subfolder/</href>
    <propstat>
      <prop>
        <displayname>subfolder</displayname>
      </prop>
      <status>HTTP/1.1 208 Already Reported</status>
    </propstat>
  </response>
</multistatus>
```

En este caso:
- El directorio principal (`/folder1/`) se describe normalmente.
- El subdirectorio (`/folder1/subfolder/`) ya se informó previamente en una operación anterior y no se vuelve a detallar.

---

### **Consideraciones**
- **Formato XML**: Al igual que otros códigos de WebDAV, el cliente debe procesar respuestas en formato XML.
- **Específico de WebDAV**: No es relevante para aplicaciones fuera del contexto de WebDAV.

--- codigo 226

### **Código de Respuesta HTTP 226: IM Used**


---

### **Ejemplo**
#### **Escenario**
Un cliente ha descargado previamente una versión de un archivo JSON y solicita solo las actualizaciones desde la última versión que tiene.

#### **Solicitud**
```http
GET /data/resource HTTP/1.1
Host: example.com
A-IM: delta
If-None-Match: "v1"
```

- **`A-IM: delta`**: Solicita al servidor una codificación delta.
- **`If-None-Match: "v1"`**: Indica que el cliente tiene la versión etiquetada como `"v1"`.

#### **Respuesta**
```http
HTTP/1.1 226 IM Used
Content-Type: application/json
ETag: "v2"
IM: delta

{
  "updatedField": "newValue"
}
```

- **`IM: delta`**: Indica que se usó una codificación delta para generar la respuesta.
- **`ETag: "v2"`**: Proporciona una nueva etiqueta de versión para la actualización.

---

### **Consideraciones**
- **Compatibilidad**: El cliente y el servidor deben admitir manipulaciones delta y el encabezado `A-IM`.
- **Casos Limitados**: Este código no es ampliamente utilizado fuera de aplicaciones específicas, como sincronización incremental.

----

--- codigo 300

### **Código de Respuesta HTTP 300: Multiple Choices**

---

### **Ejemplo**
#### **Escenario**
Un usuario solicita un documento, pero el servidor tiene el recurso disponible en varios formatos (`PDF`, `HTML`, `TXT`).

#### **Solicitud**
```http
GET /document HTTP/1.1
Host: example.com
Accept: application/pdf
```

#### **Respuesta**
```http
HTTP/1.1 300 Multiple Choices
Content-Type: application/json

{
  "message": "Este recurso tiene múltiples representaciones, seleccione una:",
  "options": [
    { "format": "HTML", "url": "https://example.com/document.html" },
    { "format": "PDF", "url": "https://example.com/document.pdf" },
    { "format": "TXT", "url": "https://example.com/document.txt" }
  ]
}
```
En este caso, el servidor informa al cliente que existen varias versiones del documento, y el cliente puede elegir la más adecuada.

----